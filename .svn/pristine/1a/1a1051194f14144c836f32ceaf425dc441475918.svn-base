/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.DggChat.DggChatGroupMessage', null, global);
goog.exportSymbol('proto.DggChat.DggChatSingleMessage', null, global);
goog.exportSymbol('proto.DggChat.DggCommon', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DggChat.DggChatSingleMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DggChat.DggChatSingleMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DggChat.DggChatSingleMessage.displayName = 'proto.DggChat.DggChatSingleMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DggChat.DggChatGroupMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DggChat.DggChatGroupMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DggChat.DggChatGroupMessage.displayName = 'proto.DggChat.DggChatGroupMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DggChat.DggCommon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DggChat.DggCommon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DggChat.DggCommon.displayName = 'proto.DggChat.DggCommon';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.DggChat.DggChatSingleMessage.prototype.toObject = function(opt_includeInstance) {
    return proto.DggChat.DggChatSingleMessage.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.DggChat.DggChatSingleMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.DggChat.DggChatSingleMessage.toObject = function(includeInstance, msg) {
    var f, obj = {
      sendid: jspb.Message.getFieldWithDefault(msg, 1, 0),
      acceptid: jspb.Message.getFieldWithDefault(msg, 2, 0),
      content: jspb.Message.getFieldWithDefault(msg, 3, ""),
      comment: jspb.Message.getFieldWithDefault(msg, 4, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DggChat.DggChatSingleMessage}
 */
proto.DggChat.DggChatSingleMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DggChat.DggChatSingleMessage;
  return proto.DggChat.DggChatSingleMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DggChat.DggChatSingleMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DggChat.DggChatSingleMessage}
 */
proto.DggChat.DggChatSingleMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setSendid(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setAcceptid(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setContent(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setComment(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DggChat.DggChatSingleMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DggChat.DggChatSingleMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DggChat.DggChatSingleMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DggChat.DggChatSingleMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAcceptid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 sendId = 1;
 * @return {number}
 */
proto.DggChat.DggChatSingleMessage.prototype.getSendid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DggChat.DggChatSingleMessage.prototype.setSendid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 acceptId = 2;
 * @return {number}
 */
proto.DggChat.DggChatSingleMessage.prototype.getAcceptid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DggChat.DggChatSingleMessage.prototype.setAcceptid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.DggChat.DggChatSingleMessage.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.DggChat.DggChatSingleMessage.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string comment = 4;
 * @return {string}
 */
proto.DggChat.DggChatSingleMessage.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.DggChat.DggChatSingleMessage.prototype.setComment = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.DggChat.DggChatGroupMessage.prototype.toObject = function(opt_includeInstance) {
    return proto.DggChat.DggChatGroupMessage.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.DggChat.DggChatGroupMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.DggChat.DggChatGroupMessage.toObject = function(includeInstance, msg) {
    var f, obj = {
      sendid: jspb.Message.getFieldWithDefault(msg, 1, 0),
      groupid: jspb.Message.getFieldWithDefault(msg, 2, 0),
      content: jspb.Message.getFieldWithDefault(msg, 3, ""),
      comment: jspb.Message.getFieldWithDefault(msg, 4, ""),
      groupname: jspb.Message.getFieldWithDefault(msg, 5, ""),
      grouppeoples: jspb.Message.getFieldWithDefault(msg, 6, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DggChat.DggChatGroupMessage}
 */
proto.DggChat.DggChatGroupMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DggChat.DggChatGroupMessage;
  return proto.DggChat.DggChatGroupMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DggChat.DggChatGroupMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DggChat.DggChatGroupMessage}
 */
proto.DggChat.DggChatGroupMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setSendid(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setGroupid(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setContent(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setComment(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setGroupname(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setGrouppeoples(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DggChat.DggChatGroupMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DggChat.DggChatGroupMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DggChat.DggChatGroupMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DggChat.DggChatGroupMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGrouppeoples();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int32 sendId = 1;
 * @return {number}
 */
proto.DggChat.DggChatGroupMessage.prototype.getSendid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DggChat.DggChatGroupMessage.prototype.setSendid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 groupId = 2;
 * @return {number}
 */
proto.DggChat.DggChatGroupMessage.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DggChat.DggChatGroupMessage.prototype.setGroupid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.DggChat.DggChatGroupMessage.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.DggChat.DggChatGroupMessage.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string comment = 4;
 * @return {string}
 */
proto.DggChat.DggChatGroupMessage.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.DggChat.DggChatGroupMessage.prototype.setComment = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string groupName = 5;
 * @return {string}
 */
proto.DggChat.DggChatGroupMessage.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.DggChat.DggChatGroupMessage.prototype.setGroupname = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 groupPeoples = 6;
 * @return {number}
 */
proto.DggChat.DggChatGroupMessage.prototype.getGrouppeoples = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.DggChat.DggChatGroupMessage.prototype.setGrouppeoples = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.DggChat.DggCommon.prototype.toObject = function(opt_includeInstance) {
    return proto.DggChat.DggCommon.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.DggChat.DggCommon} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.DggChat.DggCommon.toObject = function(includeInstance, msg) {
    var f, obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, 0),
      // code: jspb.Message.getFieldWithDefault(msg, 2, 0),
      control: jspb.Message.getFieldWithDefault(msg, 3, ""),
      action: jspb.Message.getFieldWithDefault(msg, 4, ""),
      create_time: jspb.Message.getFieldWithDefault(msg, 5, 0),
      unique_value: jspb.Message.getFieldWithDefault(msg, 6, ""),
      token: jspb.Message.getFieldWithDefault(msg, 7, ""),
      from: jspb.Message.getFieldWithDefault(msg, 8, ""),
      singlemessage: (f = msg.getSinglemessage()) && proto.DggChat.DggChatSingleMessage.toObject(includeInstance, f),
      groupmessage: (f = msg.getGroupmessage()) && proto.DggChat.DggChatGroupMessage.toObject(includeInstance, f),
      comment: jspb.Message.getFieldWithDefault(msg, 11, ""),
      head_portrait: jspb.Message.getFieldWithDefault(msg, 12, ""),
      nickname: jspb.Message.getFieldWithDefault(msg, 13, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DggChat.DggCommon}
 */
proto.DggChat.DggCommon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DggChat.DggCommon;
  return proto.DggChat.DggCommon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DggChat.DggCommon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DggChat.DggCommon}
 */
proto.DggChat.DggCommon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setCode(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setControl(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setAction(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setSendtime(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setUniqueid(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setFrom(value);
        break;
      case 9:
        var value = new proto.DggChat.DggChatSingleMessage;
        reader.readMessage(value,proto.DggChat.DggChatSingleMessage.deserializeBinaryFromReader);
        msg.setSinglemessage(value);
        break;
      case 10:
        var value = new proto.DggChat.DggChatGroupMessage;
        reader.readMessage(value,proto.DggChat.DggChatGroupMessage.deserializeBinaryFromReader);
        msg.setGroupmessage(value);
        break;
      case 11:
        var value = /** @type {string} */ (reader.readString());
        msg.setComment(value);
        break;
      case 12:
        var value = /** @type {string} */ (reader.readString());
        msg.setAvatar(value);
        break;
      case 13:
        var value = /** @type {string} */ (reader.readString());
        msg.setNickname(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DggChat.DggCommon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DggChat.DggCommon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DggChat.DggCommon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DggChat.DggCommon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getControl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSendtime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getUniqueid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSinglemessage();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.DggChat.DggChatSingleMessage.serializeBinaryToWriter
    );
  }
  f = message.getGroupmessage();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.DggChat.DggChatGroupMessage.serializeBinaryToWriter
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.DggChat.DggCommon.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DggChat.DggCommon.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 code = 2;
 * @return {number}
 */
proto.DggChat.DggCommon.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DggChat.DggCommon.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string control = 3;
 * @return {string}
 */
proto.DggChat.DggCommon.prototype.getControl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.DggChat.DggCommon.prototype.setControl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string action = 4;
 * @return {string}
 */
proto.DggChat.DggCommon.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.DggChat.DggCommon.prototype.setAction = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 sendTime = 5;
 * @return {number}
 */
proto.DggChat.DggCommon.prototype.getSendtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.DggChat.DggCommon.prototype.setSendtime = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string uniqueId = 6;
 * @return {string}
 */
proto.DggChat.DggCommon.prototype.getUniqueid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.DggChat.DggCommon.prototype.setUniqueid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string token = 7;
 * @return {string}
 */
proto.DggChat.DggCommon.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.DggChat.DggCommon.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string from = 8;
 * @return {string}
 */
proto.DggChat.DggCommon.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.DggChat.DggCommon.prototype.setFrom = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional DggChatSingleMessage singleMessage = 9;
 * @return {?proto.DggChat.DggChatSingleMessage}
 */
proto.DggChat.DggCommon.prototype.getSinglemessage = function() {
  return /** @type{?proto.DggChat.DggChatSingleMessage} */ (
    jspb.Message.getWrapperField(this, proto.DggChat.DggChatSingleMessage, 9));
};


/** @param {?proto.DggChat.DggChatSingleMessage|undefined} value */
proto.DggChat.DggCommon.prototype.setSinglemessage = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.DggChat.DggCommon.prototype.clearSinglemessage = function() {
  this.setSinglemessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DggChat.DggCommon.prototype.hasSinglemessage = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional DggChatGroupMessage groupMessage = 10;
 * @return {?proto.DggChat.DggChatGroupMessage}
 */
proto.DggChat.DggCommon.prototype.getGroupmessage = function() {
  return /** @type{?proto.DggChat.DggChatGroupMessage} */ (
    jspb.Message.getWrapperField(this, proto.DggChat.DggChatGroupMessage, 10));
};


/** @param {?proto.DggChat.DggChatGroupMessage|undefined} value */
proto.DggChat.DggCommon.prototype.setGroupmessage = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.DggChat.DggCommon.prototype.clearGroupmessage = function() {
  this.setGroupmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DggChat.DggCommon.prototype.hasGroupmessage = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string comment = 11;
 * @return {string}
 */
proto.DggChat.DggCommon.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.DggChat.DggCommon.prototype.setComment = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string avatar = 12;
 * @return {string}
 */
proto.DggChat.DggCommon.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.DggChat.DggCommon.prototype.setAvatar = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string nickname = 13;
 * @return {string}
 */
proto.DggChat.DggCommon.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.DggChat.DggCommon.prototype.setNickname = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


goog.object.extend(exports, proto.DggChat);
